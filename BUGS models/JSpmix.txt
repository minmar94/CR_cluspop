
model {

  #Pledger et al. (2003)'s model with G class-specific detection probabilities (i.e. p1,...,pG),
  #constant survival probabilities and mixture weights w=(w1,...,wG)
  
  #NOTATION:
  
  #y[i,t] -> frequency of the i-th individual at time t
  #z[i,t] -> binary variable: 1 if the i-th individual belongs to the population at time t, 0 otherwise
  #r[i,t] -> binary variable: 1 if the i-th individual is recruitable in the population at time t, 0 otherwise
  #clust[i] -> class the i-th individual belongs to (it can be equal to 1,2,...,G)
  
  #w -> vector of the G mixture weights
  #phi -> survival probability 
  #p[g] -> detection probability of individuals in the g-th class, g=1,...,G
  #rho[t] -> recruitment probability at time t
  
  #muz[i,t] -> probability of being in the population at time t
  #            (if i is in the population at time t-1 OR is recruited at time t);
  #            otherwise, it's zero
  #muy[i,t] -> capture probability of individual in group g (if i is in the population at time t);
  #            otherwise, it's zero
  
  #M -> size of the augmented population
  #T -> total number of primary sampling occasions (e.g. months)
  #J[t] -> total number of secondary sampling occasions (e.g. days) in time (e.g. month) t
  #G -> number of classes (or components of the mixture)
  
  #Nind[i] -> number of occasions the i-th individual has been in the population (0,1,2,...)
  #Nalive[i] -> binary: 1 if the i-th individual belongs to the superpopulation, 0 otherwise
  #Nsuper -> number of individuals which belong to the superpopulation
  
  #loglik_it[i,t] -> contribution of the i-th individual at time t to the log-likelihood
  #loglik_i[i] -> log-likelihood for the i-th individual
  
  
  
  phi ~ dunif(0,1)
  
  p[1] ~ dunif(0,1)
      
  for (g in 2:G){
      
    p[g] ~ dbeta(1,1) T(p[g-1],1)
       
  }

  
  for(t in 1:T){
    
    rho[t] ~ dbeta(1/T,2-t/T)
    
  }
  
  w ~ ddirch(rep(1,G))
  
  
  for (i in 1:M){
    
    clust[i] ~ dcat(w[1:G])
        
    y[i,1] ~ dbin(muy[i,1],J[1])
    muy[i,1] = z[i,1]*p[clust[i]]
    z[i,1] ~ dbin(rho[1],1)
    r[i,1] = 1
    
    loglik_it[i,1] = logdensity.bin(y[i,1], muy[i,1], J[1])
    
    for (t in 2:T){
      
      y[i,t] ~ dbin(muy[i,t],J[t])
      muy[i,t] = z[i,t]*p[clust[i]]
      z[i,t] ~ dbin(muz[i,t],1)
      muz[i,t] = phi*z[i,t-1] + rho[t]*r[i,t]
      r[i,t] = r[i,(t-1)]*(1-z[i,t-1])
      
      loglik_it[i,t] = logdensity.bin(y[i,t], muy[i,t], J[t])
      
    }
    
    loglik_i[i] = sum(loglik_it[i,]) #log-likelihood for individual i
    
  }
  
  for(t in 1:T){
    N[t] = sum(z[1:M,t])
  }
  
  for (i in 1:M){ # Compute Nsuper
    
    Nind[i] = sum(z[i,1:T])
    Nalive[i] = 1-equals(Nind[i],0)
    
  }
  
  Nsuper = sum(Nalive[1:M])
}

